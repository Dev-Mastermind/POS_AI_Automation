name: API Automation CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for regression testing
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - security
          - schemathesis
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.9'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
      run_integration:
        description: 'Run integration tests'
        required: false
        default: true
        type: boolean
      run_metrics:
        description: 'Generate metrics dashboard'
        required: false
        default: true
        type: boolean
      run_security_scan:
        description: 'Run security scan'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ github.event.inputs.python_version || '[3.8, 3.9, "3.10"]' }}
        test-type: ${{ github.event.inputs.test_type == 'all' && '[unit, integration, security, schemathesis]' || github.event.inputs.test_type || '[unit, integration, security, schemathesis]' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run PyTest tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/ -m "not schemathesis" \
          --html=reports/report_${{ matrix.test-type }}.html \
          --self-contained-html \
          --json-report=reports/report_${{ matrix.test-type }}.json \
          --cov=tests \
          --cov-report=html:reports/coverage_${{ matrix.test-type }} \
          --cov-report=term-missing \
          -v
          
    - name: Run Security tests
      if: matrix.test-type == 'security'
      run: |
        pytest tests/test_security.py \
          --html=reports/report_${{ matrix.test-type }}.html \
          --self-contained-html \
          --json-report=reports/report_${{ matrix.test-type }}.json \
          -v
          
    - name: Run Schemathesis tests
      if: matrix.test-type == 'schemathesis'
      run: |
        pytest tests/test_schemathesis.py \
          --html=reports/report_${{ matrix.test-type }}.html \
          --self-contained-html \
          --json-report=reports/report_${{ matrix.test-type }}.json \
          -v
          
    - name: Run Schemathesis against OpenAPI spec
      if: matrix.test-type == 'schemathesis'
      run: |
        schemathesis run openapi_spec.yaml \
          --checks all \
          --max-response-time 5000 \
          --hypothesis-max-examples 10 \
          --report=reports/schemathesis_report.json \
          --report-format=json
          
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.test-type }}-${{ matrix.python-version }}
        path: |
          reports/
        retention-days: 30
        
  integration:
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_integration == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Run integration tests
      run: |
        pytest tests/ -m integration \
          --html=reports/integration_report.html \
          --self-contained-html \
          --json-report=reports/integration_report.json \
          -v
          
    - name: Upload integration reports
      uses: actions/upload-artifact@v3
      with:
        name: integration-reports
        path: reports/
        retention-days: 30
        
  metrics:
    runs-on: ubuntu-latest
    needs: [test, integration]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_metrics == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test reports
      uses: actions/download-artifact@v3
      with:
        name: test-reports-unit-3.9
        path: reports/
        
    - name: Generate metrics dashboard
      run: |
        python scripts/generate_metrics.py
        
    - name: Upload metrics dashboard
      uses: actions/upload-artifact@v3
      with:
        name: metrics-dashboard
        path: reports/metrics/
        retention-days: 30
        
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_security_scan == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r tests/ -f json -o reports/bandit_report.json || true
        safety check --json --output reports/safety_report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: reports/
        retention-days: 30
        
  notify:
    runs-on: ubuntu-latest
    needs: [test, integration, metrics, security-scan]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "Tests failed! Check the workflow for details."
        # In production, this would send Slack/email notifications
        
    - name: Notify on success
      if: success()
      run: |
        echo "All tests passed successfully!"
        # In production, this would send success notifications
