name: API Automation CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for regression testing
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.10.12'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.12'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run Unit Tests
      run: |
        pytest tests/ -m "not schemathesis and not integration" \
          --html=reports/report_unit.html \
          --self-contained-html \
          --json-report \
          --json-report-file=reports/report_unit.json \
          --junitxml=reports/junit_unit.xml \
          --cov=tests \
          --cov-report=html:reports/coverage_unit \
          --cov-report=term-missing \
          -v

    - name: Run Security Tests
      run: |
        pytest tests/test_security.py \
          --html=reports/report_security.html \
          --self-contained-html \
          --json-report \
          --json-report-file=reports/report_security.json \
          --junitxml=reports/junit_security.xml \
          -v

    - name: Run Schemathesis Tests
      run: |
        pytest tests/test_schemathesis.py \
          --html=reports/report_schemathesis.html \
          --self-contained-html \
          --json-report \
          --json-report-file=reports/report_schemathesis.json \
          --junitxml=reports/junit_schemathesis.xml \
          -v
      
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-3.10.12
        path: |
          reports/
        retention-days: 30
        
  integration:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.12'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Create reports directory
      run: mkdir -p reports
        
    - name: Run integration tests
      run: |
        pytest tests/ -m integration \
          --html=reports/integration_report.html \
          --self-contained-html \
          --json-report \
          --json-report-file=reports/integration_report.json \
          --junitxml=reports/junit_integration.xml \
          -v
  
    - name: Upload integration reports
      uses: actions/upload-artifact@v4
      with:
        name: integration-reports
        path: reports/
        retention-days: 30
        
  metrics:
    runs-on: ubuntu-latest
    needs: [test, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test reports
      uses: actions/download-artifact@v4
      with:
        name: test-reports-3.10.12
        path: reports/
        
    - name: Generate metrics dashboard
      run: |
        python scripts/generate_metrics.py
        
    - name: Upload metrics dashboard
      uses: actions/upload-artifact@v4
      with:
        name: metrics-dashboard
        path: reports/metrics/
        retention-days: 30
        
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create reports directory
      run: mkdir -p reports

    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r tests/ -f json -o reports/bandit_report.json || true
        safety check --json --output reports/safety_report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/
        retention-days: 30
        
  notify:
    runs-on: ubuntu-latest
    needs: [test, integration, metrics, security-scan]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "Tests failed! Check the workflow for details."
        # In production, this would send Slack/email notifications
        
    - name: Notify on success
      if: success()
      run: |
        echo "All tests passed successfully!"
        # In production, this would send success notifications
