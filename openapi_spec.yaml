openapi: 3.0.3
info:
  title: Hanwha Vision Users API
  description: API for managing users in the Hanwha Vision system
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@hanwha-vision.com

servers:
  - url: https://api.hanwha-vision.com
    description: Production server
  - url: https://staging-api.hanwha-vision.com
    description: Staging server
  - url: http://localhost:8000
    description: Local development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /users:
    get:
      summary: List users
      description: Retrieve a paginated list of users with optional filtering
      operationId: listUsers
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          description: Search term for filtering users
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: role
          in: query
          description: Filter users by role
          required: false
          schema:
            type: string
            enum: [user, admin, moderator]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: Create user
      description: Create a new user account
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete user
      description: Delete a user account
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
          example: 1
        username:
          type: string
          description: Unique username
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          example: "john_doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john@example.com"
        first_name:
          type: string
          description: User's first name
          minLength: 1
          maxLength: 100
          example: "John"
        last_name:
          type: string
          description: User's last name
          minLength: 1
          maxLength: 100
          example: "Doe"
        role:
          type: string
          enum: [user, admin, moderator]
          description: User's role in the system
          default: user
          example: "user"
        created_at:
          type: string
          format: date-time
          description: When the user was created
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the user was last updated
          example: "2024-01-01T00:00:00Z"
      required:
        - id
        - username
        - email
        - first_name
        - last_name
        - role
        - created_at
        - updated_at
      additionalProperties: false

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          example: "John"
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Doe"
        role:
          type: string
          enum: [user, admin, moderator]
          default: user
          example: "user"
      required:
        - username
        - email
        - first_name
        - last_name
      additionalProperties: false

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "newemail@example.com"
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Updated"
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Name"
        role:
          type: string
          enum: [user, admin, moderator]
          example: "admin"
      additionalProperties: false

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
      additionalProperties: false

    UsersListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
          description: Total number of users
          example: 100
        page:
          type: integer
          description: Current page number
          example: 1
        per_page:
          type: integer
          description: Number of users per page
          example: 10
        search_term:
          type: string
          description: Search term used (if any)
          example: "john"
      required:
        - users
        - total
      additionalProperties: false

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "User not found"
        code:
          type: string
          description: Error code for programmatic handling
          example: "USER_NOT_FOUND"
        request_id:
          type: string
          description: Unique request identifier for debugging
          example: "req_12345"
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2024-01-01T00:00:00Z"
      required:
        - error
        - code
      additionalProperties: false

    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Validation failed"
        code:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        details:
          type: object
          description: Field-specific validation errors
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["This field is required"]
            first_name: ["This field is required"]
        request_id:
          type: string
          description: Unique request identifier
          example: "req_12345"
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2024-01-01T00:00:00Z"
      required:
        - error
        - code
        - details
      additionalProperties: false

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

tags:
  - name: Users
    description: User management operations
